layout(points) in;
layout(triangle_strip, max_vertices = 48) out;
// for points need the following
//layout(points, max_vertices = 1) out;

in int value[]; // Voxel value :  Critical : Must have defined as an array 

// ****
uniform mat4 mvpMatrix; //model-view-projection matrix

//uniform mat4 model;
//uniform mat4 view;
//uniform mat4 projection;
// ****

uniform vec3 camera_loc;   // Camera location
uniform vec3 camera_front_vector;
uniform vec3 camera_up_vector;
uniform vec3 camera_right_vector;


//in int value;

//in  vec4 varyingColor[];
//out vec4 fvaryingColor;


// reserved light variables
uniform vec4  light_color; // ****
uniform vec3  lighting_direction; // ****
uniform float ambience; //****
uniform float specular_strength; //****
uniform float lighting_intensity; //****


// reserved camera light variables
uniform int   camera_lighting_type; //****
uniform int   use_camera_lighting; //****
uniform vec3  lighting_camera_offset; //****


// ++++++++++++++++++++++++++++++++++++++++++++++++++++++

uniform int   t_frame;
 
uniform float voxSize;

uniform vec3  voxel_origin;
uniform float voxel_hcp_z_increment;

//voxel surface display data
uniform float voxel_min_surface_display_value;
uniform float voxel_max_surface_display_value;

// -----------------------------------
// Cannot use same variable name for in and out variables 
// use Input and output interface blocks to solve this
// The following input/output block is to allow  varyingColor 
// to be passed to the fragment shader or without changing the name

in VertexData
{
  vec4 varyingColor;
} gs_in[]; // Must have as an array otherwise will not work as one for each input vertex,

out VertexData
{
  vec4 varyingColor;
} gs_out;

// *!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
struct Material {
    float diffuse;
    float specular;
    float shininess;
};
// Light Data_structures

struct DirLight {
    vec3 direction;
	vec3 color;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct PointLight {
    vec3 position;
	vec3 color;
    
    float constant;
    float linear;
    float quadratic;
	float attenuation_factor;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct SpotLight {
    vec3 position;
	vec3 color;
    vec3 direction;
    float cutOff;
    float outerCutOff;
	float attenuation_factor;
  
    float constant;
    float linear;
    float quadratic;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;       
};

#define MAX_NUMBER_DIRECTIONAL_LIGHTS 10
#define MAX_NUMBER_POINT_LIGHTS       10
#define MAX_NUMBER_SPOT_LIGHTS        10

uniform int number_directional_lights;
uniform int number_point_lights;
uniform int number_spot_lights;

uniform DirLight dirLight[MAX_NUMBER_DIRECTIONAL_LIGHTS];
uniform PointLight pointLights[MAX_NUMBER_POINT_LIGHTS];
uniform SpotLight spotLight[MAX_NUMBER_SPOT_LIGHTS];
uniform Material material;

// *!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!